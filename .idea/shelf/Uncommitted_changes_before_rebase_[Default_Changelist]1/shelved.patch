Index: src/main/persistence/Writer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package persistence;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\n\r\n// A writer that can write account data to a file\r\npublic class Writer {\r\n    private PrintWriter printWriter;\r\n\r\n    // EFFECTS: constructs a writer that will write data to file\r\n    public Writer(File file) throws FileNotFoundException, UnsupportedEncodingException {\r\n        printWriter = new PrintWriter(file, \"UTF-8\");\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: writes saveable to file\r\n    public void write(Saveable saveable) {\r\n        saveable.save(printWriter);\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: close print writer\r\n    // NOTE: you MUST call this method when you are done writing data!\r\n    public void close() {\r\n        printWriter.close();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/persistence/Writer.java	(revision 9dec0ec19e7d47a2e172ab96738d5b9ef090e13b)
+++ src/main/persistence/Writer.java	(date 1596076137125)
@@ -5,7 +5,7 @@
 import java.io.PrintWriter;
 import java.io.UnsupportedEncodingException;
 
-// A writer that can write account data to a file
+// A writer that can write account data to a file based on Writer in AccountNotRobust
 public class Writer {
     private PrintWriter printWriter;
 
Index: src/test/persistence/WriterTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package persistence;\r\n\r\nimport exceptions.IllegalListSize;\r\nimport model.Entry;\r\nimport model.EntryList;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.UnsupportedEncodingException;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.junit.jupiter.api.Assertions.fail;\r\n\r\nclass WriterTest {\r\n    private static final String TEST_FILE = \"./data/testEntryList.txt\";\r\n    private Writer testWriter;\r\n    private EntryList entryList;\r\n    private Entry newMoonEntry;\r\n    private Entry waxCrEntry;\r\n\r\n    @BeforeEach\r\n    void runBefore() throws FileNotFoundException, UnsupportedEncodingException {\r\n        testWriter = new Writer(new File(TEST_FILE));\r\n        entryList = new EntryList();\r\n        newMoonEntry = new Entry( \"New Moon\", 90);\r\n        waxCrEntry = new Entry(\"Waxing Crescent\", 135);\r\n        try {\r\n            entryList.addObservation(newMoonEntry);\r\n            entryList.addObservation(waxCrEntry);\r\n        } catch (IllegalListSize illegalListSize) {\r\n            fail(\"Unexpected IllegalListSize exception\");\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void testWriteAccounts() {\r\n        // save entryList to file\r\n        testWriter.write(entryList);\r\n        testWriter.close();\r\n\r\n        // now read them back in and verify that the entry list has the expected values\r\n        try {\r\n            EntryList pastEntryList = Reader.readEntryList(new File(TEST_FILE));\r\n            Entry entryOne = pastEntryList.getEntryFromList(0);\r\n            assertEquals(\"New Moon\", entryOne.getMoonPhase());\r\n            assertEquals(90, entryOne.getAngleFromEast());\r\n            assertEquals(\"Noon\", entryOne.getTime());\r\n\r\n            Entry entryTwo = pastEntryList.getEntryFromList(1);\r\n            assertEquals(\"Waxing Crescent\", entryTwo.getMoonPhase());\r\n            assertEquals(135, entryTwo.getAngleFromEast());\r\n            assertEquals(\"6PM\", entryTwo.getTime());\r\n\r\n        } catch (IOException e) {\r\n            fail(\"IOException should not have been thrown\");\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/persistence/WriterTest.java	(revision 9dec0ec19e7d47a2e172ab96738d5b9ef090e13b)
+++ src/test/persistence/WriterTest.java	(date 1596076136908)
@@ -14,6 +14,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.fail;
 
+// based on WriterTest in AccountNotRobust
 class WriterTest {
     private static final String TEST_FILE = "./data/testEntryList.txt";
     private Writer testWriter;
Index: src/test/persistence/ReaderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package persistence;\r\n\r\nimport model.Entry;\r\nimport model.EntryList;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.junit.jupiter.api.Assertions.fail;\r\n\r\nclass ReaderTest {\r\n    @Test\r\n    void testParseEntryListFile1() {\r\n        try {\r\n            EntryList entryList = Reader.readEntryList(new File(\"./data/testEntryFile1.txt\"));\r\n            Entry entryOne = entryList.getEntryFromList(0);\r\n            assertEquals(\"New Moon\", entryOne.getMoonPhase());\r\n            assertEquals(90, entryOne.getAngleFromEast());\r\n            assertEquals(\"Noon\", entryOne.getTime());\r\n\r\n            Entry entryTwo = entryList.getEntryFromList(1);\r\n            assertEquals(\"Waxing Crescent\", entryTwo.getMoonPhase());\r\n            assertEquals(135, entryTwo.getAngleFromEast());\r\n            assertEquals(\"6PM\", entryTwo.getTime());\r\n\r\n        } catch (IOException e) {\r\n            fail(\"IOException should not have been thrown\");\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void testParseAccountsFile2() {\r\n        try {\r\n            EntryList entryList = Reader.readEntryList(new File(\"./data/testEntryFile2.txt\"));\r\n            Entry entryOne = entryList.getEntryFromList(0);\r\n            assertEquals(\"Full Moon\", entryOne.getMoonPhase());\r\n            assertEquals(180, entryOne.getAngleFromEast());\r\n            assertEquals(\"6AM\", entryOne.getTime());\r\n\r\n            Entry entryTwo = entryList.getEntryFromList(1);\r\n            assertEquals(\"Third Quarter\", entryTwo.getMoonPhase());\r\n            assertEquals(45, entryTwo.getAngleFromEast());\r\n            assertEquals(\"3AM\", entryTwo.getTime());\r\n\r\n        } catch (IOException e) {\r\n            fail(\"IOException should not have been thrown\");\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void testIOException() {\r\n        try {\r\n            Reader.readEntryList(new File(\"./path/does/not/exist/testAccount.txt\"));\r\n        } catch (IOException e) {\r\n            // expected\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/persistence/ReaderTest.java	(revision 9dec0ec19e7d47a2e172ab96738d5b9ef090e13b)
+++ src/test/persistence/ReaderTest.java	(date 1596076136919)
@@ -11,6 +11,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.fail;
 
+// based on ReaderTest in AccountNotRobust
 class ReaderTest {
     @Test
     void testParseEntryListFile1() {
Index: src/main/persistence/Reader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package persistence;\r\n\r\nimport model.Entry;\r\nimport model.EntryList;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n// A reader that can read account data from a file\r\npublic class Reader {\r\n    public static final String DELIMITER = \",\";\r\n\r\n    // EFFECTS: returns an entry list parsed from file; throws\r\n    // IOException if an exception is raised when opening / reading from file\r\n    public static EntryList readEntryList(File file) throws IOException {\r\n        List<String> fileContent = readFile(file);\r\n        return parseContent(fileContent);\r\n    }\r\n\r\n    // EFFECTS: returns content of file as a list of strings, each string\r\n    // containing the content of one row of the file\r\n    private static List<String> readFile(File file) throws IOException {\r\n        return Files.readAllLines(file.toPath());\r\n    }\r\n\r\n    // EFFECTS: returns a list of entries parsed from list of strings\r\n    // where each string contains data for one entry\r\n    private static EntryList parseContent(List<String> fileContent) {\r\n        EntryList entryList = new EntryList();\r\n\r\n        for (String line : fileContent) {\r\n            ArrayList<String> lineComponents = splitString(line);\r\n            entryList.add(parseEntry(lineComponents));\r\n        }\r\n\r\n        return entryList;\r\n    }\r\n\r\n    // EFFECTS: returns a list of strings obtained by splitting line on DELIMITER\r\n    private static ArrayList<String> splitString(String line) {\r\n        String[] splits = line.split(DELIMITER);\r\n        return new ArrayList<>(Arrays.asList(splits));\r\n    }\r\n\r\n    // REQUIRES: components has size 3 where element 0 represents the\r\n    // moon phase of the next Entry to be constructed, element 1 represents\r\n    // the angle from the East facing South, element 2 represents the time of observation\r\n    // EFFECTS: returns an entry constructed from components\r\n    private static Entry parseEntry(List<String> components) {\r\n        String phaseName = components.get(0);\r\n        int angle = Integer.parseInt(components.get(1));\r\n        String time = components.get(2);\r\n        return new Entry(phaseName, angle, time);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/persistence/Reader.java	(revision 9dec0ec19e7d47a2e172ab96738d5b9ef090e13b)
+++ src/main/persistence/Reader.java	(date 1596076136993)
@@ -10,7 +10,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-// A reader that can read account data from a file
+// A reader that can read entry list data from a file based on Reader in AccountNotRobust
 public class Reader {
     public static final String DELIMITER = ",";
 
Index: src/main/persistence/Saveable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package persistence;\r\n\r\nimport java.io.PrintWriter;\r\n\r\n// Represents data that can be saved to file\r\npublic interface Saveable {\r\n    // MODIFIES: printWriter\r\n    // EFFECTS: writes the saveable to printWriter\r\n    void save(PrintWriter printWriter);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/persistence/Saveable.java	(revision 9dec0ec19e7d47a2e172ab96738d5b9ef090e13b)
+++ src/main/persistence/Saveable.java	(date 1596076136980)
@@ -2,7 +2,7 @@
 
 import java.io.PrintWriter;
 
-// Represents data that can be saved to file
+// Represents data that can be saved to file from Saveable in AccountNotRobust
 public interface Saveable {
     // MODIFIES: printWriter
     // EFFECTS: writes the saveable to printWriter
