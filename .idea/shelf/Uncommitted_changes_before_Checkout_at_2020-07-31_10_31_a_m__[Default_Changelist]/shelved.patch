Index: src/main/ui/MoondialApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\nimport exceptions.IllegalListSize;\r\nimport model.Entry;\r\nimport model.EntryList;\r\nimport persistence.Reader;\r\nimport persistence.Writer;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\n// Time Estimator Application based on TellerApp in AccountNotRobust\r\n\r\npublic class MoondialApp {\r\n    private static final String ENTRYLIST_FILE = \"./data/entrylist.txt\";\r\n    private EntryList entryList;\r\n    private List<Integer> sortedByPhase;\r\n    private Scanner input;\r\n\r\n    // EFFECTS: runs the teller application\r\n    public MoondialApp() {\r\n        runMoondial();\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: processes user input\r\n    private void runMoondial() {\r\n        boolean keepGoing = true;\r\n        String command;\r\n        input = new Scanner(System.in);\r\n\r\n        loadEntryList();\r\n\r\n        while (keepGoing) {\r\n            displayMenu();\r\n            command = input.next();\r\n            command = command.toLowerCase();\r\n\r\n            if (command.equals(\"q\")) {\r\n                saveEntryList();\r\n                keepGoing = false;\r\n            } else {\r\n                processCommand(command);\r\n            }\r\n        }\r\n\r\n        System.out.println(\"\\nGoodbye! Thank you for using Moondial.\");\r\n    }\r\n\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: loads accounts from ENTRYLIST_FILE, if that file exists;\r\n    // otherwise initializes accounts with default values\r\n    private void loadEntryList() {\r\n        try {\r\n            EntryList pastEntryList = Reader.readEntryList(new File(ENTRYLIST_FILE));\r\n            entryList = pastEntryList;\r\n        } catch (IOException e) {\r\n            initialize();\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: initializes an empty Entry List and sorted List by phase\r\n    private void initialize() {\r\n        entryList = new EntryList();\r\n        sortedByPhase = entryList.sortAndCountListByPhase();\r\n    }\r\n\r\n    // EFFECTS: saves state of entryList to ENTRYLIST_FILE\r\n    private void saveEntryList() {\r\n        try {\r\n            Writer writer = new Writer(new File(ENTRYLIST_FILE));\r\n            writer.write(entryList);\r\n            writer.close();\r\n            System.out.println(\"List of Observations saved to file \" + ENTRYLIST_FILE);\r\n        } catch (FileNotFoundException e) {\r\n            System.out.println(\"Unable to save observations to \" + ENTRYLIST_FILE);\r\n        } catch (UnsupportedEncodingException e) {\r\n            e.printStackTrace();\r\n            // this is due to a programming error\r\n        }\r\n    }\r\n\r\n    // EFFECTS: displays menu of options to user\r\n    private void displayMenu() {\r\n        System.out.println(\"\\nSelect from:\");\r\n        System.out.println(\"\\tm -> make observation\");\r\n        System.out.println(\"\\tr -> remove entry\");\r\n        System.out.println(\"\\te -> print entry\");\r\n        System.out.println(\"\\tp -> select list to print\");\r\n        System.out.println(\"\\ts -> save entry list\");\r\n        System.out.println(\"\\tq -> quit and save\");\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: processes user command\r\n    private void processCommand(String command) {\r\n        if (command.equals(\"m\")) {\r\n            doMakeObservation();\r\n        } else if (command.equals(\"r\")) {\r\n            doRemoveEntry();\r\n        } else if (command.equals(\"e\")) {\r\n            printSelectedEntry();\r\n        } else if (command.equals(\"p\")) {\r\n            printList();\r\n        } else if (command.equals(\"s\")) {\r\n            saveEntryList();\r\n        } else {\r\n            System.out.println(\"Selection not valid...\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: makes an observation and adds it to the end of the list\r\n    private void doMakeObservation() {\r\n        String moonPhase = selectMoonPhase();\r\n        int angleFromEast = selectAngleFromEast();\r\n        Entry entry = new Entry(moonPhase, angleFromEast);\r\n        try {\r\n            entryList.addObservation(entry);\r\n        } catch (IllegalListSize illegalListSize) {\r\n            System.err.println(\"The entry list has reached maximum capacity. Please remove an entry.\");\r\n        }\r\n        System.out.println(\"You observed the \" + moonPhase + \" at \" + angleFromEast + \" degrees at \"\r\n                + entry.getTime() + \".\");\r\n    }\r\n\r\n    // EFFECTS: prompts user to select moon phase\r\n    private String selectMoonPhase() {\r\n        String selectionMoonPhase = \"\"; // force entry into loop\r\n\r\n        while (!(selectionMoonPhase.equals(\"nm\") || selectionMoonPhase.equals(\"waxcr\")\r\n                || selectionMoonPhase.equals(\"firstq\") || selectionMoonPhase.equals(\"waxgib\")\r\n                || selectionMoonPhase.equals(\"fullm\") || selectionMoonPhase.equals(\"wangib\")\r\n                || selectionMoonPhase.equals(\"thirdq\") || selectionMoonPhase.equals(\"wancr\"))) {\r\n            System.out.println(\"Please input phase as viewed from the N.Hemisphere\");\r\n            System.out.println();\r\n            System.out.println(\"nm -> New Moon\");\r\n            System.out.println(\"waxcr -> Waxing Crescent\");\r\n            System.out.println(\"firstq -> First Quarter\");\r\n            System.out.println(\"waxgib -> Waxing Gibbous\");\r\n            System.out.println(\"fullm -> Full Moon\");\r\n            System.out.println(\"wangib -> Waning Gibbous\");\r\n            System.out.println(\"thirdq -> Third Quarter\");\r\n            System.out.println(\"wancr -> Waning Crescent\");\r\n            selectionMoonPhase = input.next();\r\n            selectionMoonPhase = selectionMoonPhase.toLowerCase();\r\n        }\r\n\r\n        return expandPhase(selectionMoonPhase);\r\n    }\r\n\r\n    // EFFECTS: expands a shortened moon phase to full name\r\n    private String expandPhase(String s) {\r\n        if (s.equals(\"nm\")) {\r\n            return \"New Moon\";\r\n        } else if (s.equals(\"waxcr\")) {\r\n            return \"Waxing Crescent\";\r\n        } else if (s.equals(\"firstq\")) {\r\n            return \"First Quarter\";\r\n        } else if (s.equals(\"waxgib\")) {\r\n            return \"Waxing Gibbous\";\r\n        } else if (s.equals(\"fullm\")) {\r\n            return \"Full Moon\";\r\n        } else if (s.equals(\"wangib\")) {\r\n            return \"Waning Gibbous\";\r\n        } else if (s.equals(\"thirdq\")) {\r\n            return \"Third Quarter\";\r\n        } else {\r\n            return \"Waning Crescent\";\r\n        }\r\n    }\r\n\r\n    // EFFECTS: prompts user to select angle from east\r\n    private int selectAngleFromEast() {\r\n        String selectionAngle = \"\"; // force entry into loop\r\n\r\n        while (!(selectionAngle.equals(\"0\") || selectionAngle.equals(\"45\") || selectionAngle.equals(\"90\")\r\n                || selectionAngle.equals(\"135\") || selectionAngle.equals(\"180\"))) {\r\n            System.out.println(\"Please input Angle from East when facing South.\");\r\n            System.out.println();\r\n            System.out.println(\"0 -> 0 degrees\");\r\n            System.out.println(\"45 -> 45 degrees\");\r\n            System.out.println(\"90 -> 90 degrees\");\r\n            System.out.println(\"135 -> 135 degrees\");\r\n            System.out.println(\"180 -> 180 degrees\");\r\n            selectionAngle = input.next();\r\n        }\r\n\r\n        return convertAngle(selectionAngle);\r\n    }\r\n\r\n    // EFFECTS: changes a string representing an angle value into an integer\r\n    private int convertAngle(String a) {\r\n        if (a.equals(\"0\")) {\r\n            return 0;\r\n        } else if (a.equals(\"45\")) {\r\n            return 45;\r\n        } else if (a.equals(\"90\")) {\r\n            return 90;\r\n        } else if (a.equals(\"135\")) {\r\n            return 135;\r\n        } else {\r\n            return 180;\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: removes specified entry from entry list\r\n    private void doRemoveEntry() {\r\n        printEntryList();\r\n        try {\r\n            entryList.removeObservation(selectEntry());\r\n        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {\r\n            System.err.println(\"This is out of the bounds of the list.\");\r\n        }\r\n        entryList.sortAndCountListByPhase();\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: selects Entry\r\n    private int selectEntry() {\r\n        String selectionEntry = \"\"; // force entry into loop\r\n\r\n        while (!(selectionEntry.equals(\"0\") || (selectionEntry.equals(\"1\")) || (selectionEntry.equals(\"2\"))\r\n                || (selectionEntry.equals(\"3\")) || (selectionEntry.equals(\"4\")))) {\r\n            System.out.println(\"0 -> Entry 0\");\r\n            System.out.println(\"1 -> Entry 1\");\r\n            System.out.println(\"2 -> Entry 2\");\r\n            System.out.println(\"3 -> Entry 3\");\r\n            System.out.println(\"4 -> Entry 4\");\r\n            selectionEntry = input.next();\r\n        }\r\n\r\n        if (selectionEntry.equals(\"0\")) {\r\n            return 0;\r\n        } else if (selectionEntry.equals(\"1\")) {\r\n            return 1;\r\n        } else if (selectionEntry.equals(\"2\")) {\r\n            return 2;\r\n        } else if (selectionEntry.equals(\"3\")) {\r\n            return 3;\r\n        } else {\r\n            return 4;\r\n        }\r\n\r\n    }\r\n\r\n    // EFFECTS: prints specified entry\r\n    private void printEntry(int i) {\r\n        System.out.println(\"Entry \" + i + \": \" + getEntryMoonPhaseFromEntryList(i)\r\n                + \" \" + getEntryAngleFromEntryList(i) + \" degrees at \" + getEntryTimeFromEntryList(i));\r\n\r\n    }\r\n\r\n    // EFFECTS: prompts user to select an entry and prints entry to screen,\r\n    private void printSelectedEntry() {\r\n        printEntryList();\r\n        selectEntryToPrint();\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: selects Entry\r\n    private void selectEntryToPrint() {\r\n        String selectionEntry = \"\"; // force entry into loop\r\n\r\n        while (!(selectionEntry.equals(\"0\") || (selectionEntry.equals(\"1\")) || (selectionEntry.equals(\"2\"))\r\n                || (selectionEntry.equals(\"3\")) || (selectionEntry.equals(\"4\")))) {\r\n            System.out.println(\"0 for Entry 0\");\r\n            System.out.println(\"1 for Entry 1\");\r\n            System.out.println(\"2 for Entry 2\");\r\n            System.out.println(\"3 for Entry 3\");\r\n            System.out.println(\"4 for Entry 4\");\r\n            selectionEntry = input.next();\r\n        }\r\n        if (selectionEntry.equals(\"0\") && entryList.size() >= 1) {\r\n            printEntry(0);\r\n        } else if (selectionEntry.equals(\"1\") && entryList.size() >= 2) {\r\n            printEntry(1);\r\n        } else if (selectionEntry.equals(\"2\") && entryList.size() >= 3) {\r\n            printEntry(2);\r\n        } else if (selectionEntry.equals(\"3\") && entryList.size() >= 4) {\r\n            printEntry(3);\r\n        } else if (selectionEntry.equals(\"4\") && entryList.size() >= 5) {\r\n            printEntry(4);\r\n        } else {\r\n            System.out.println(\"This is not a valid entry.\");\r\n        }\r\n    }\r\n\r\n    // EFFECTS: prompts user to select entry list or sorted list and prints it\r\n    private void printList() {\r\n        String selectionList = \"\"; // force entry into loop\r\n\r\n        while (!(selectionList.equals(\"e\") || (selectionList.equals(\"s\")))) {\r\n            System.out.println(\"Select a list to print.\");\r\n\r\n\r\n            System.out.println(\"e -> Entry List\");\r\n            System.out.println(\"s -> Sorted List\");\r\n            selectionList = input.next();\r\n            selectionList = selectionList.toLowerCase();\r\n        }\r\n\r\n        if (selectionList.equals(\"e\")) {\r\n            printEntryList();\r\n        } else {\r\n            printSortedByPhase();\r\n        }\r\n    }\r\n\r\n    // EFFECTS: prints sortedByPhase\r\n    private void printSortedByPhase() {\r\n        if (entryList.size() == 0) {\r\n            System.out.println(\"No observations have been made.\");\r\n        }\r\n        entryList.sortAndCountListByPhase();\r\n        System.out.println(\" Here is your summary of observations\");\r\n        System.out.println(\" \");\r\n        System.out.println(\"# of New Moon = \" + sortedByPhase.get(0));\r\n        System.out.println(\"# of Waxing Crescent = \" + sortedByPhase.get(1));\r\n        System.out.println(\"# of First Quarter = \" + sortedByPhase.get(2));\r\n        System.out.println(\"# of Waxing Gibbous = \" + sortedByPhase.get(3));\r\n        System.out.println(\"# of Full Moon = \" + sortedByPhase.get(4));\r\n        System.out.println(\"# of Waning Gibbous = \" + sortedByPhase.get(5));\r\n        System.out.println(\"# of Third Quarter = \" + sortedByPhase.get(6));\r\n        System.out.println(\"# of Waning Crescent = \" + sortedByPhase.get(7));\r\n    }\r\n\r\n    // EFFECTS: prints entry List\r\n    private void printEntryList() {\r\n        if (!(entryList.size() == 0)) {\r\n            for (int i = 0; i < entryList.size(); i++) {\r\n                printEntry(i);\r\n            }\r\n        } else {\r\n            System.out.println(\"No Observations have been made.\");\r\n        }\r\n        System.out.println(entryList);\r\n    }\r\n\r\n    // REQUIRES: observation is in list\r\n    // MODIFIES: this\r\n    // EFFECTS: returns specified entry's moon phase\r\n    public String getEntryMoonPhaseFromEntryList(int i) {\r\n        Entry entry = entryList.getEntryFromList(i);\r\n        return entry.getMoonPhase();\r\n    }\r\n\r\n    // REQUIRES: observation is in list\r\n    // MODIFIES: this\r\n    // EFFECTS: returns specified entry's angle\r\n    public int getEntryAngleFromEntryList(int i) {\r\n        Entry entry = entryList.getEntryFromList(i);\r\n        return entry.getAngleFromEast();\r\n    }\r\n\r\n    // REQUIRES: observation is in list\r\n    // MODIFIES: this\r\n    // EFFECTS: returns specified entry's angle\r\n    public String getEntryTimeFromEntryList(int i) {\r\n        Entry entry = entryList.getEntryFromList(i);\r\n        return entry.getTime();\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/ui/MoondialApp.java	(revision 467a0a6f9ef6dfd879e48c9546b3fd4b03d01ece)
+++ src/main/ui/MoondialApp.java	(date 1596216539990)
@@ -319,7 +319,7 @@
         if (entryList.size() == 0) {
             System.out.println("No observations have been made.");
         }
-        entryList.sortAndCountListByPhase();
+        sortedByPhase = entryList.sortAndCountListByPhase();
         System.out.println(" Here is your summary of observations");
         System.out.println(" ");
         System.out.println("# of New Moon = " + sortedByPhase.get(0));
@@ -341,7 +341,6 @@
         } else {
             System.out.println("No Observations have been made.");
         }
-        System.out.println(entryList);
     }
 
     // REQUIRES: observation is in list
diff --git .idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_1.xml .idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_1.xml
